def props = [:]
def metrics = [:]
def jsonString = null

node {
    checkout scm
    props.env = readProperties file:"${workspace}/env.properties"
    props.template = readProperties file:"${workspace}/template.properties"
    props.java = readProperties file:"${workspace}/java.properties"
    externalMethod = load("${workspace}/externalMethod.groovy") 
}

pipeline {
  agent {
    node {
      label 'master'
    }
  }
  
  environment {
      DEVOPS_FOLDER = "${props.env.source}"
  }
    
  parameters {
     string(name: 'Project', defaultValue: 'DEVOPS', description: 'Enter the name of the task in ACMS.')
     string(name: 'Developer', defaultValue: 'KORCZA03', description: 'Enter developer name.')
  }
  
  stages {
    stage("Prepare"){
        steps{
            script {
                metrics = externalMethod.metricsDefault()
                metrics.start = externalMethod.getTimestamp()

                println("Running job ${env.JOB_NAME}")
                def map = [:]
                map.put("props", props)
                map.put("params", params)
                map.put("workspace", workspace)
                
                dir("${DEVOPS_FOLDER}") {
                    externalMethod.cmdExec(externalMethod.cmdCopyPropFromAcmsTask(map))
                    externalMethod.cmdExec(externalMethod.copyPropFileFromIfs(map))                
			          }

                //get properties from acms task
                def localfile = "${workspace}/${params.Project}.properties"
                props.taskProperties = readProperties file:localfile

                metrics.prepare = true 
                jsonString = externalMethod.mapToJson(metrics)

            }
        }
    }
    stage('Build'){
        steps {
            script {
                def map = [:]
                map.put("props", props)
                map.put("params", params)
                
			          dir("${DEVOPS_FOLDER}") {
                    externalMethod.cmdExec(externalMethod.acmsCompileTask(map))  
			          }

                metrics.build = true 
                jsonString = externalMethod.mapToJson(metrics)
            }
        }
    }
  
    stage('UnitTest'){
        steps {
            script {
              def map = [:]
              def out = [:]
              map.put("props", props)
              map.put("workspace", workspace)   
            
              out = externalMethod.prepareUnitTest(map)
              def list = out.get('command')
              dir("${DEVOPS_FOLDER}") {
                list.each {
                    externalMethod.cmdExec(it)                   
                }
              }

              map = null
              def ccJsonReport
              def utMmap = [:]
              list = out.get('report')        
              list.each {
                  map = externalMethod.reportListToMap(it)
                  ccJsonReport = readJSON file: map.get('unitTestPath')  
                  utMmap.put(map.get('unitTestName'), ccJsonReport)                
              }

              metrics.utreport = utMmap
              metrics.unittest = true 
              jsonString = externalMethod.mapToJson(metrics)
            }
        }
    }
	
    stage('Deploy'){
       steps {
		      script {
              def map = [:]
              map.put("props", props)
              map.put("params", params)

			        dir("${DEVOPS_FOLDER}") {
                 externalMethod.cmdExec(externalMethod.acmsPromoteTask(map))
			        }
              metrics.deploy = true 
              jsonString = externalMethod.mapToJson(metrics)
		      }
       }
    }

    stage('Test'){
      steps {
        script {
              def map = [:]
              map.put("props", props)
              map.put("params", params)
              def list = externalMethod.prepareIntegrationTest(map)
              dir("${DEVOPS_FOLDER}") {
                list.each {
                    externalMethod.cmdExec(it)                    
                }
              } 
              metrics.test = true 
              jsonString = externalMethod.mapToJson(metrics)            
        }
      }
    }

    stage("Report"){
        steps{
            script {
              metrics.report = true 
              metrics.end = externalMethod.getTimestamp()
              jsonString = externalMethod.mapToJson(metrics)   
            }
        }
    }
	
  }
  // 
  post {
    always {
      echo 'always runs regardless of the completion status of the Pipeline run'

      echo jsonString
    }
    success {
      echo 'step will run only if the build is successful'
    }
    failure {
      echo 'only when the Pipeline is currently in a "failed" state run, usually expressed in the Web UI with the red indicator.'
    }
    unstable {
      echo 'current Pipeline has "unstable" state, usually by a failed test, code violations and other causes, in order to run. Usually represented in a web UI with a yellow indication.'
    }
  }
}
