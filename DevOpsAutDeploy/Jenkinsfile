def props = [:]
def mp = [:]

// def props = null
def template = null
// def java = null

// def externalCall = null
def externalMethod = null

def taskProperties = null

node {
    checkout scm
    props.env = readProperties file:"${workspace}/env.properties"
    template = readProperties file:"${workspace}/template.properties"
    props.java = readProperties file:"${workspace}/java.properties"
     //modules.externalCall = load("${workspace}/externalCall.groovy")
    externalMethod = load("${workspace}/externalMethod.groovy") 
    // externalCall = load("${workspace}/externalCall.groovy")
}

pipeline {
  agent {
    node {
      label 'master'
    }
  }
  
  environment {
      DEVOPS_FOLDER = "${props.env.source}"
  }
    
  parameters {
     string(name: 'Project', defaultValue: 'DEVOPS', description: 'Enter the name of the task in ACMS.')
     string(name: 'Developer', defaultValue: 'KORCZA03', description: 'Enter developer name.')
  }
  
  stages {
    stage("Prepare"){
        steps{
            script {
                println("Running job ${env.JOB_NAME}")
                def member = "/QSYS.LIB/${params.Developer}.LIB/JENKINS.FILE/${params.Project}.MBR"
                def propFile = "${params.Project}.properties" 
                def remoteFile = "${props.env.remote}${propFile}"

                def cpyToSmtf  = '"' + String.format("${template.cpytosmtf}", "${member}", "${remoteFile}") + '"'       
                def runCpyToSmtf = "${props.java.javajar} ${props.java.jaribmcmd} ${cpyToSmtf}"
                def runCpyTxtFromIfs = "${props.java.javajar} ${props.java.jaribmifscpytxtfromifs}  -r ${remoteFile} -l ${workspace}/${propFile} -c"

                def echo = null
                dir("${DEVOPS_FOLDER}") {
			              echo = bat label: 'Copy to SMTF', returnStdout: true, script: "${runCpyToSmtf}"
                    echo = bat label: 'Copy from IFS', returnStdout: true, script: "${runCpyTxtFromIfs}"
                  
			          }
                taskProperties = readProperties file:"${workspace}/${propFile}"

                mp.put("Project","${params.Project}");
                mp.put("Developer","${params.Developer}");
            }
        }
    }
    stage('Build') {
        steps {
          script {
             def acmsCompileTask = '"' + String.format("${template.acmscompile}", "${params.Project}", "${taskProperties.ENV}", "${params.Developer}", "${taskProperties.RELEASE}") + '"'
             def runAcmsCompileTask = "${props.java.javajar} ${props.java.jaribmcmd} ${acmsCompileTask}"
             def mainCnvPgmCmd = ""

             def mainCnvPgm = "${taskProperties.MAINCNVPGM}"
             if (mainCnvPgm?.trim()) {
                mainCnvPgmCmd = '"' + String.format("${template.cnvpgmcmd}", "${mainCnvPgm}", "${params.Developer}") + '"'
             }
 			 
			       dir("${DEVOPS_FOLDER}") {
			          def echo = bat label: 'Building..', returnStdout: true, script: "${runAcmsCompileTask} ${mainCnvPgmCmd}"
			       }
          }
        }
    }
  
    stage('UnitTest') {
      steps {
        script{
          def unitTest = "${taskProperties.UNITTEST}"
          if (unitTest?.trim()) {
            def list = []
            unitTest.tokenize(',').each {
               println "Unit test: ${it}"  
               list.add("${it}")       
               def ccFile = "${it}.cczip"
               def unitTestCmd = '"' + String.format("${template.rununittest}", "${it}") + '"'         
               def codeCoverageCmd = '"' + String.format("${template.codecoverage}", "${it}", "${props.env.remote}${ccFile}") + '"'	         
               def runUnitTestWithCC = "${props.java.javajar} ${props.java.jaribmcmd} ${unitTestCmd} ${codeCoverageCmd}"
               def remoteFile = "${props.env.remote}${ccFile}"
               def localFile = "${props.env.local}${ccFile}"
               //Minimum Acceptable Code Coverage
               def percent = "${taskProperties.MINACCEPTCODECOVERAGE}"
               if (externalMethod.isNullOrEmpty(percent)) {
                 println("Minimum Acceptable Code Coverage is null or empty. Default is 0")
                 percent = "0"
               }
 
               def runCpyByteFromIfs = "${props.java.javajar} ${props.java.jaribmifscpybytefromifs} -r ${remoteFile} -l ${localFile} -c"			 
               def runCodeCoverageReport = "${props.java.javajar} ${props.java.jarrpgcc} -f ${localFile} -p ${percent}" 

               def echo = null
			         dir("${DEVOPS_FOLDER}") {
                 echo = bat label: 'Run unit test', returnStdout: true, script: "${runUnitTestWithCC}"
                 echo = bat label: 'Copy report from IFS', returnStdout: true, script: "${runCpyByteFromIfs}"
                 echo = bat label: 'Get code coverage raport', returnStdout: true, script: "${runCodeCoverageReport}"
               }
            }
            mp.put("minccpercent", "${taskProperties.MINACCEPTCODECOVERAGE}")
            mp.put("unittest", list);
          }
        }
      }
    }
	
    stage('Deploy') {
	    input {
           message "Should we continue?"
           ok "Yes, we should."
        }
       steps {
		      script {		                  
            def acmsPromoteTask = '"' + String.format("${template.acmspromote}", "${params.Project}", "${taskProperties.ENV}", "${params.Developer}", "${taskProperties.RELEASE}") + '"'
            def runAcmsPromoteTask = "${props.java.javajar} ${props.java.ibmisbmcmd} ${acmsPromoteTask}"	

			      dir("${DEVOPS_FOLDER}") {
			        def echo = bat label: 'Deploying...', returnStdout: true, script: "${runAcmsPromoteTask}"
			      }

		      }
       }
    }

    stage('Test') {
      steps {
        script {
             // step 1. change env
             // step 2. build env by run cnv pgm for database
             // step 3. run integration tests            
             def changeEnv = '"' + "SETPOZAT01" + '"'
             def runChangeEnv = "${props.java.javajar} ${props.java.jaribmcmd} ${changeEnv}"

             def mainCnvPgm = "${taskProperties.MAINCNVPGM}"
             def dblib = "${taskProperties.DBLIB}"
             def testPgm = "${taskProperties.TESTPGM}"
            
             def mainCnvPgmCmd = ""
             def testPgmCmd = ""
             if (!externalMethod.isNullOrEmpty(mainCnvPgm) && !externalMethod.isNullOrEmpty(dblib)) {
               mainCnvPgmCmd = '"' + String.format("${template.cnvpgmcmd}", "${mainCnvPgm}", "${dblib}") + '"'
              }
             if (!externalMethod.isNullOrEmpty(testPgmCmd)) {
               testPgmCmd = '"' + String.format("${template.runtest}", "${testPgm}") + '"'
             } 

              dir("${DEVOPS_FOLDER}") {
			            def echo = bat label: 'Building..', returnStdout: true, script: "${runChangeEnv} ${mainCnvPgmCmd} ${testPgmCmd}"
			        }

          println(mp)
        }
      }
    }
	
  }
  // 
  post {
    always {
      echo 'always runs regardless of the completion status of the Pipeline run'
    }
    success {
      echo 'step will run only if the build is successful'
    }
    failure {
      echo 'only when the Pipeline is currently in a "failed" state run, usually expressed in the Web UI with the red indicator.'
    }
    unstable {
      echo 'current Pipeline has "unstable" state, usually by a failed test, code violations and other causes, in order to run. Usually represented in a web UI with a yellow indication.'
    }
  }
}
